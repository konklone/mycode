<?php

/**
 * Implements hook_entity_info().
 */
function communitysurvey_entity_info() {
  $return['communitysurvey'] = array(
    'label' => t('Community Survey'),
    'controller class' => 'CommunitySurveyController',
    'base table' => 'communitysurvey',    
    'uri callback' => 'communitysurvey_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',      
//      'bundle' => 'type',
      'label' => 'title',
     ),
//    'bundle keys' => array(
//      'bundle' => 'type',
//    ),
    'static cache' => TRUE,
    'bundles' => array(),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => FALSE,
      ),
    ),
  );

  foreach (communitysurvey_types() as $type => $info) {
    $return['communitysurvey']['bundles'][$type] = array(
      'label' => $info->name,
      'admin' => array(
        'path' => 'admin/structure/communitysurvey/manage/%communitysurvey_type',
        'real path' => 'admin/structure/communitysurvey/manage/' . str_replace('_', '-', $type),
        'bundle argument' => 4,
        'access arguments' => array('administer communitysurvey'),
      ),
    );
  }

  return $return;
}

/**
 * Entity uri callback.
 */
function communitysurvey_uri($communitysurvey) {
  return array(
    'path' => 'communitysurvey/' . $communitysurvey->id,
  );
}

/**
 * Implements hook_fied_extra_fields().
 */
function communitysurvey_field_extra_fields() {
  $extra = array();

  foreach (communitysurvey_types() as $type) {
    $extra['communitysurvey'][$type->type] = array(
      'form' => array(
        'title' => array(
          'label' => t('Title'),
          'description' => t('The name of the communitysurvey'),
          'weight' => -5,
        ),
      ),
      'display' => array(
        'title' => array(
          'label' => t('Title'),
          'description' => t('The name of the communitysurvey'),
          'weight' => -5,
        ),
      ),
    );
  }

  return $extra;
}

/**
 * Implements hook_permission().
 */
function communitysurvey_permission() {
  return array(
    'administer communitysurvey' =>  array(
      'title' => t('Administer communitysurvey'),
    ),
    'create communitysurvey' =>  array(
      'title' => t('Create communitysurvey'),
    ),
    'update communitysurvey' =>  array(
      'title' => t('Update communitysurvey'),
    ),
    'view communitysurvey' =>  array(
      'title' => t('View communitysurvey'),
    ),
    'delete communitysurvey' =>  array(
      'title' => t('Delete communitysurvey'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function communitysurvey_menu() {
  $items['admin/structure/communitysurvey'] = array(
    'title' => 'Manage communitysurvey',
    'description' => 'Manage communitysurvey.',
    'page callback' => 'communitysurvey_overview_types',
    'access arguments' => array('administer communitysurvey'),
    'file' => 'communitysurvey.admin.inc',
  );
  $items['admin/structure/communitysurvey/manage/%communitysurvey_type'] = array(
    'title' => 'View communitysurvey type',
    'title callback' => 'communitysurvey_type_page_title',
    'title arguments' => array(4),
    'page callback' => 'communitysurvey_information',
    'page arguments' => array(4),
    'access arguments' => array('administer communitysurvey'),
    'file' => 'communitysurvey.admin.inc',
  );
  $items['admin/structure/communitysurvey/manage/%communitysurvey_type/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['communitysurvey/add'] = array(
    'title' => 'Add new communitysurvey',
    'page callback' => 'communitysurvey_add_page',
    'access arguments' => array('create communitysurvey'),
    'weight' => 1,
    'menu_name' => 'management',
    'file' => 'communitysurvey.pages.inc',
  );
  foreach (communitysurvey_types() as $type) {
    $type_url_str = str_replace('_', '-', $type->type);
    $items['communitysurvey/add/' . $type_url_str] = array(
      'title' => $type->name,
      'title callback' => 'check_plain',
      'page callback' => 'communitysurvey_add',
      'page arguments' => array(2),
      'access arguments' => array('create communitysurvey'),
      'description' => $type->description,
      'file' => 'communitysurvey.pages.inc',
    );
  }
  $items['communitysurvey/%communitysurvey'] = array(
    'title callback' => 'communitysurvey_page_title',
    'title arguments' => array(1),
    'page callback' => 'communitysurvey_page_view',
    'page arguments' => array(1),
    'access arguments' => array('view communitysurvey'),
    'type' => MENU_CALLBACK,
    'file' => 'communitysurvey.pages.inc',
  );
  $items['communitysurvey/%communitysurvey/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['communitysurvey/%communitysurvey/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'communitysurvey_page_edit',
    'page arguments' => array(1),
    'access arguments' => array('update communitysurvey'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'communitysurvey.pages.inc',
  );
  $items['communitysurvey/%communitysurvey/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('communitysurvey_delete_confirm', 1),
    'access arguments' => array('delete communitysurvey'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'communitysurvey.pages.inc',
  );
  $items['communitysurvey/recent'] = array(
    'title' => 'Recently added communitysurvey',
    'page callback' => 'communitysurvey_page_list_recent',
    'access arguments' => array('view communitysurvey'),
    'file' => 'communitysurvey.pages.inc',
  );

  return $items;
}

/**
 * Sets the page title based on the specified communitysurvey.
 *
 * @param $communitysurvey
 *   The communitysurvey object.
 */
function communitysurvey_page_title($communitysurvey) {
  return $communitysurvey->address;
}

/**
 * Implements hook_forms().
 *
 * All communitysurvey forms share the same form handler.
 */
function communitysurvey_forms() {
  $forms = array();
  if ($types = communitysurvey_types()) {
    foreach (array_keys($types) as $type) {
      $forms[$type . '_communitysurvey_form']['callback'] = 'communitysurvey_form';
    }
  }
  return $forms;
}

/**
 * Get a list of all communitysurvey types available.
 *
 * Usually this would be more full-featured.
 *
 * @return array
 *   An array of communitysurvey type objects. Note that the "type" key matches what
 *   was defined as the main key in hook_entity_info().
 */
function communitysurvey_types() {
  $types = &drupal_static(__FUNCTION__);

  if (empty($types)) {
    $types['survey'] = (object)array(
      'type' => 'survey',
      'name' => t('Add Community Survey Details'),
      'description' => t('Community Survey Details.')
    );
   
    
  }
  return $types;
}

/**
 * Menu title callback.
 *
 * @param $type
 *   The communitysurvey type.
 * @return string
 *   The human-friendly name of the communitysurvey type.
 */
function communitysurvey_type_page_title($type) {
  return t('Manage @type', array('@type' => $type->name));
}

/**
 * Get an individual communitysurvey type definition object.
 *
 * @param $type
 *   The key of the communitysurvey type we want.
 * @return object
 *   The specified communitysurvey type.
 */
function communitysurvey_type_load($type) {
  $types = communitysurvey_types();
  $type = str_replace('-', '_', $type);
  return isset($types[$type]) ? $types[$type] : FALSE;
}

/**
 * Load communitysurvey entities from the database.
 *
 * This function should be used whenever you need to load more than one communitysurvey
 * from the database. Userdetailss are loaded into memory and will not require
 * database access if loaded again during the same page request.
 *
 * @see entity_load()
 *
 * @param $ids
 *   An array of communitysurvey IDs.
 * @param $conditions
 *   An array of conditions on the {communitysurvey} table in the form 'field' => $value.
 * @param $reset
 *   Whether to reset the internal entity_load cache.
 *
 * @return
 *   An array of node objects indexed by nid.
 */
function communitysurvey_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('communitysurvey', $ids, $conditions, $reset);
}

/**
 * Load an communitysurvey object from the database.
 *
 * @param $id
 *   The communitysurvey ID.
 * @param $vid
 *   The revision ID.
 * @param $reset
 *   Whether to reset the communitysurvey_load_multiple cache.
 *
 * @return
 *   A fully-populated node object.
 */
function communitysurvey_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  //$conditions = (isset($vid) ? array('vid' => $vid) : array());
  $communitysurvey = communitysurvey_load_multiple($ids,'', $reset);
  return $communitysurvey ? reset($communitysurvey) : FALSE;
}

/**
 * Save an communitysurvey.
 *
 * @param $communitysurvey
 *   The communitysurvey to be saved.
 * @return
 *   The saved communitysurvey, now with an id if necessary.
 */
function communitysurvey_save($communitysurvey) {
  //var_dump($communitysurvey);
//  exit();
  return entity_get_controller('communitysurvey')->save($communitysurvey);
}

/**
 * Returns an initialized communitysurvey object.
 *
 * @param $type
 *   The machine-readable type of the communitysurvey.
 *
 * @return
 *   An communitysurvey object with all default fields initialized.
 */
function communitysurvey_new($type = '') {
  return entity_get_controller('communitysurvey')->create($type);
}


/**
 * Deletes an communitysurvey by ID.
 *
 * @param $id
 *   The ID of the product to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function communitysurvey_delete($id) {
  return communitysurvey_delete_multiple(array($id));
}

/**
 * Deletes multiple communitysurvey by ID.
 *
 * @param $ids
 *   An array of communitysurvey IDs to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function communitysurvey_delete_multiple($ids) {
  return entity_get_controller('communitysurvey')->delete($ids);
}
